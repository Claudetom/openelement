<?xml version="1.0" encoding="utf-8" ?>
<doc>
  <summary>Code source de l'élément "Image" (WEImage)</summary>
  <example>

    <code lang="VB">

      <![CDATA[
    Imports openElement.WebElement.Elements
Imports openElement.WebElement
Imports System.ComponentModel
Imports openElement.WebElement.ElementWECommon.Stats.Forms

'NameSpace of element (create yours ex: Elements.MyCompagny)
Namespace Elements.Stats

    ''' <summary>
    ''' This class is the source code of openElement's element : WECounter 
    ''' Create a public class with inherit ElementBase (complete namespace : openElement.WebElement.Elements.ElementBase) 
    ''' or another ElementBase class daughter (ElementBaseTextIcon or WEDynamic
    ''' See comments in elementBase for all explanations of methods of mybase used in this class.
    '''  the class's name must to be unique in the namespace. he can't will be changing after
    ''' This class must to be  "Serializable"
    ''' </summary>
    ''' <remarks>it'd be better of us to subject the class name</remarks>
    <Serializable()> _
    Public Class WECounter
        Inherits ElementBase

#Region "Properties"
        'For public property metaTags, see specific xml docs                                                                                                InzM3t5itgmm

        ''' <summary>
        ''' config data of WECounter Element.  
        ''' </summary>
        ''' <remarks></remarks>
        Private _Config As FrmCounterConfig.WECounterConfig

        ''' <summary>
        ''' Public property of _Config
        ''' </summary>
        <Ressource.localizable.LocalizableCatAtt(Ressource.localizable.LocalizableCatAtt.EnumWECategory.Edition), _
        Ressource.localizable.LocalizableNameAtt("_N001"), _
        Ressource.localizable.LocalizableDescAtt("_D001"), _
        Editor(GetType(Editors.UITypeCounter), GetType(Drawing.Design.UITypeEditor)), _
        Common.Attributes.ExportVar(Common.Attributes.ExportVar.EnuVarType.All), _
        Common.Attributes.PageUpdateMode(Common.Attributes.PageUpdateMode.EnuUpdateMode.Element)> _
        Public Property Config() As FrmCounterConfig.WECounterConfig
            Get
                If _Config Is Nothing Then _Config = New FrmCounterConfig.WECounterConfig
                Return _Config
            End Get
            Set(ByVal value As FrmCounterConfig.WECounterConfig)
                _Config = value
            End Set
        End Property

#End Region

#Region "Builder required function"

        ''' <summary>
        ''' Obligatory configuration of constructor. The base constructor call is necessary 
        ''' for parameter, see comments in ElementBase class
        ''' </summary>
        ''' <param name="page"> Page reference which element belongs </param>
        ''' <param name="parentID"> Unique ID of parent container</param>
        ''' <param name="templateName"> template's name which element belongs</param>
        ''' <remarks></remarks>
        Public Sub New(ByVal page As Page, ByVal parentID As String, ByVal templateName As String)
            MyBase.New(EnuElementType.PageEdit, "WECounter", page, parentID, templateName)
            MyBase.TypeResize = EnuTypeResize.None
            
            'careful: that is the default value at element creating and not the obligatory default value
            Config.CountMethod = FrmCounterConfig.EnuMethodCounter.All
            Config.InitialValue = 0
            Config.TypeCounter = FrmCounterConfig.EnuTypeCounter.All
            Config.Lenght = 4

        End Sub

        ''' <summary>         
        ''' Required function who allow to complete elementInfo object        
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Protected Overrides Function OnGetInfo() As ElementInfo

            Dim info As New ElementInfo(Me)
            'Element's name displayed in element's list
            info.ToolBoxCaption = My.Resources.text.LocalizableOpen._0026 'this text is a localizable variable for traduction
            'Element's description
            info.ToolBoxDescription = My.Resources.text.LocalizableOpen._0027
            'Number of major version
            info.VersionMajor = 1
            'Number of minor version
            info.VersionMinor = 0
            'openElement's toolsbox group which the item belongs
            info.GroupName = "NBGroupStats"
            'Icon display in the openElement's toolsbox (size : 16*16px)
            info.ToolBoxIco = My.Resources.WECounter
            'Automatic opening property when the element will be adding in the page
            info.AutoOpenProperty = "Config"

            'Add a fast acces of the property in bottom bar (Icon display below the element when he's selecting)
            '(parameter: Property's name, associated icon's name, associated tooltip text)
            info.SortPropertyList.Add(New SortProperty("Config", "tools.png", My.Resources.text.LocalizableOpen._0030))
            Return info

        End Function

        ''' <summary>
        ''' start event. Necessary for configuration of element
        ''' </summary>
        ''' <remarks></remarks>
        Protected Overrides Sub OnOpen()

            'configuration of style zones. Here, we are only one specific zone 
            Dim ConfigStylesZones As New List(Of StylesManager.ConfigStylesZone)
            ConfigStylesZones.Add(New StylesManager.ConfigStylesZone("Digit", My.Resources.text.LocalizableOpen._0028, My.Resources.text.LocalizableOpen._0029))


            'Obligatory at end
            MyBase.OnOpen(ConfigStylesZones)

        End Sub

        ''' <summary>
        '''  Required function who allow to add external script (spécific or shared script)    
        ''' </summary>
        ''' <remarks></remarks>
        Protected Overrides Sub OnInitExternalFiles()

            'function of adding from external script : add scripts to the project and add the link into html page
            'Careful, all path should be relatif according to the parent folder of files

            'Here, addition of one file of javascript type (param: type of file, path in openElement project, final path of copied file in the web project)
            MyBase.AddExternalScripts(Common.EnuScriptType.Javascript, "ElementsLibrary\Common\Client\WECounter.js", "WEFiles/Client/WECounter.js")

            'Here, addition of on file of php script type
            MyBase.AddExternalScripts(Common.EnuScriptType.Php, "ElementsLibrary\Common\Server\WECounter.php", "WEFiles/Server/WECounter.php")
            MyBase.OnInitExternalFiles()
        End Sub

#End Region

#Region "Render"
        'html render functions. (obligatory for element of type 'EnuElementType.PageEdit')

        ''' <summary>
        ''' Main event of element's render. it's obligatory for element at type of EnuElementType.PageEdit
        ''' here, we write the html of the element
        ''' </summary>
        ''' <param name="writer"></param>
        ''' <remarks></remarks>
        Protected Overrides Sub Render(ByVal writer As Common.HtmlWriter)
            Dim initialValueLenght As Integer = Config.InitialValue.ToString.Length

            'obligatory at beginning 
            MyBase.RenderBeginTag(writer)

            'You have three phase for render
            '* Editor : writting of html render  for editor zone into openelement
            '* Export : writting of final html render: it's the html code for .htm file upload on server
            '* Preview : writting of html render for preview file

            'Here, we write the counter's html code for final file to upload (the php code is active only on the server)
            If MyBase.Page.RenderMode <> openElement.WebElement.Page.EnuTypeRenderMode.Export Then
                For i = 1 To Me.Config.Lenght - initialValueLenght
                    Call DivRender(writer, "0")
                Next
                For i = 1 To Me.Config.Lenght
                    If initialValueLenght >= i Then Call DivRender(writer, Config.InitialValue.ToString.Chars(i - 1))
                Next
            End If
            'obligatory at end
            MyBase.RenderEndTag(writer)
        End Sub

        Private Sub DivRender(ByVal writer As Common.HtmlWriter, ByVal value As String)
            writer.WriteBeginTag("div")
            writer.WriteAttribute("class", GetStyleZoneClass("Digit"))
            writer.Write(System.Web.UI.HtmlTextWriter.TagRightChar)
            writer.Write(value)
            writer.WriteEndTag("div")
            writer.WriteLine()
        End Sub


#End Region

    End Class

End Namespace

    
         ]]>

    </code>

    <code lang="C#">

      <![CDATA[ 
    using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using openElement.WebElement.Elements;
using openElement.WebElement;
using System.ComponentModel;
using openElement.WebElement.ElementWECommon.Stats.Forms;

//NameSpace of element (create yours ex: Elements.MyCompagny)
namespace Elements.Stats
{

	/// <summary>
	/// This class is the source code of openElement's element : WECounter 
	/// Create a public class with inherit ElementBase (complete namespace : openElement.WebElement.Elements.ElementBase) 
	/// or another ElementBase class daughter (ElementBaseTextIcon or WEDynamic
	/// See comments in elementBase for all explanations of methods of mybase used in this class.
	///  the class's name must to be unique in the namespace. he can't will be changing after
	/// This class must to be  "Serializable"
	/// </summary>
	/// <remarks>it'd be better of us to subject the class name</remarks>
	[Serializable()]
	public class WECounter : ElementBase
	{

		#region "Properties"
		//For public property metaTags, see specific xml docs                                                                                                InzM3t5itgmm

		/// <summary>
		/// config data of WECounter Element.  
		/// </summary>
		/// <remarks></remarks>

		private FrmCounterConfig.WECounterConfig _Config;
		/// <summary>
		/// Public property of _Config
		/// </summary>
		[Ressource.localizable.LocalizableCatAtt(Ressource.localizable.LocalizableCatAtt.EnumWECategory.Edition), Ressource.localizable.LocalizableNameAtt("_N001"), Ressource.localizable.LocalizableDescAtt("_D001"), Editor(typeof(Editors.UITypeCounter), typeof(Drawing.Design.UITypeEditor)), Common.Attributes.ExportVar(System.Data.Common.Attributes.ExportVar.EnuVarType.All), Common.Attributes.PageUpdateMode(System.Data.Common.Attributes.PageUpdateMode.EnuUpdateMode.Element)]
		public FrmCounterConfig.WECounterConfig Config {
			get {
				if (_Config == null)
					_Config = new FrmCounterConfig.WECounterConfig();
				return _Config;
			}
			set { _Config = value; }
		}

		#endregion

		#region "Builder required function"

		/// <summary>
		/// Obligatory configuration of constructor. The base constructor call is necessary 
		/// for parameter, see comments in ElementBase class
		/// </summary>
		/// <param name="page"> Page reference which element belongs </param>
		/// <param name="parentID"> Unique ID of parent container</param>
		/// <param name="templateName"> template's name which element belongs</param>
		/// <remarks></remarks>
		public WECounter(Page page, string parentID, string templateName) : base(EnuElementType.PageEdit, "WECounter", page, parentID, templateName)
		{
			base.TypeResize = EnuTypeResize.None;

			//careful: that is the default value at element creating and not the obligatory default value
			Config.CountMethod = FrmCounterConfig.EnuMethodCounter.All;
			Config.InitialValue = 0;
			Config.TypeCounter = FrmCounterConfig.EnuTypeCounter.All;
			Config.Lenght = 4;

		}

		/// <summary>         
		/// Required function who allow to complete elementInfo object        
		/// </summary>
		/// <returns></returns>
		/// <remarks></remarks>
		protected override ElementInfo OnGetInfo()
		{

			ElementInfo info = new ElementInfo(this);
			//Element's name displayed in element's list
			info.ToolBoxCaption = My.Resources.text.LocalizableOpen._0026;
			//this text is a localizable variable for traduction
			//Element's description
			info.ToolBoxDescription = My.Resources.text.LocalizableOpen._0027;
			//Number of major version
			info.VersionMajor = 1;
			//Number of minor version
			info.VersionMinor = 0;
			//openElement's toolsbox group which the item belongs
			info.GroupName = "NBGroupStats";
			//Icon display in the openElement's toolsbox (size : 16*16px)
			info.ToolBoxIco = My.Resources.WECounter;
			//Automatic opening property when the element will be adding in the page
			info.AutoOpenProperty = "Config";

			//Add a fast acces of the property in bottom bar (Icon display below the element when he's selecting)
			//(parameter: Property's name, associated icon's name, associated tooltip text)
			info.SortPropertyList.Add(new SortProperty("Config", "tools.png", My.Resources.text.LocalizableOpen._0030));
			return info;

		}

		/// <summary>
		/// start event. Necessary for configuration of element
		/// </summary>
		/// <remarks></remarks>

		protected override void OnOpen()
		{
			//configuration of style zones. Here, we are only one specific zone 
			List<StylesManager.ConfigStylesZone> ConfigStylesZones = new List<StylesManager.ConfigStylesZone>();
			ConfigStylesZones.Add(new StylesManager.ConfigStylesZone("Digit", My.Resources.text.LocalizableOpen._0028, My.Resources.text.LocalizableOpen._0029));


			//Obligatory at end
			base.OnOpen(ConfigStylesZones);

		}

		/// <summary>
		///  Required function who allow to add external script (spécific or shared script)    
		/// </summary>
		/// <remarks></remarks>

		protected override void OnInitExternalFiles()
		{
			//function of adding from external script : add scripts to the project and add the link into html page
			//Careful, all path should be relatif according to the parent folder of files

			//Here, addition of one file of javascript type (param: type of file, path in openElement project, final path of copied file in the web project)
			base.AddExternalScripts(System.Data.Common.EnuScriptType.Javascript, "ElementsLibrary\\Common\\Client\\WECounter.js", "WEFiles/Client/WECounter.js");

			//Here, addition of on file of php script type
			base.AddExternalScripts(System.Data.Common.EnuScriptType.Php, "ElementsLibrary\\Common\\Server\\WECounter.php", "WEFiles/Server/WECounter.php");
			base.OnInitExternalFiles();
		}

		#endregion

		#region "Render"
		//html render functions. (obligatory for element of type 'EnuElementType.PageEdit')

		/// <summary>
		/// Main event of element's render. it's obligatory for element at type of EnuElementType.PageEdit
		/// here, we write the html of the element
		/// </summary>
		/// <param name="writer"></param>
		/// <remarks></remarks>
		protected override void Render(Common.HtmlWriter writer)
		{
			int initialValueLenght = Config.InitialValue.ToString.Length;

			//obligatory at beginning 
			base.RenderBeginTag(writer);

			//You have three phase for render
			//* Editor : writting of html render  for editor zone into openelement
			//* Export : writting of final html render: it's the html code for .htm file upload on server
			//* Preview : writting of html render for preview file

			//Here, we write the counter's html code for final file to upload (the php code is active only on the server)
			if (base.Page.RenderMode != openElement.WebElement.Page.EnuTypeRenderMode.Export) {
				for (i = 1; i <= this.Config.Lenght - initialValueLenght; i++) {
					DivRender(writer, "0");
				}
				for (i = 1; i <= this.Config.Lenght; i++) {
					if (initialValueLenght >= i)
						DivRender(writer, Config.InitialValue.ToString.Chars(i - 1));
				}
			}
			//obligatory at end
			base.RenderEndTag(writer);
		}

		private void DivRender(Common.HtmlWriter writer, string value)
		{
			writer.WriteBeginTag("div");
			writer.WriteAttribute("class", GetStyleZoneClass("Digit"));
			writer.Write(System.Web.UI.HtmlTextWriter.TagRightChar);
			writer.Write(value);
			writer.WriteEndTag("div");
			writer.WriteLine();
		}
		#endregion
	}
}

            ]]>

    </code>
  </example>
</doc>

