<?xml version="1.0" encoding="utf-8"?>

<doc>
<summary>Code source de l'élément "Texte simple ligne" (WELabel)</summary>
<example>        

<code lang="VB">

<![CDATA[
Imports openElement.WebElement.Elements
Imports openElement.WebElement
Imports System.ComponentModel


'Namespace de l'élément (Créer le votre ex : Elements.MyCompagny)
Namespace Elements.Standard


    ''' <summary>
    ''' L'élément présenté ci-dessous est la copie conforme du code source du label disponible dans openElement
    ''' Créer une Class Public qui hérite de "openElement.WebElement.Elements.ElementBase".
    ''' Le nom de la class est primordial il doit être unique pour le même Namespace et ne pourra plus être modifier par la suite.
    ''' Indiquer aussi que cette Class est sérializable.
    ''' </summary>
    ''' <remarks>Il est préférable de nous soumettre le nom</remarks>
    <Serializable()> _
    Public Class WELabel
        Inherits ElementBase

        ''' <summary>
        ''' Création d'une variable privé qui sera enregistré lors de la sauvegarde de la page puis rechargé à l'ouverture.
        ''' </summary>
        ''' <remarks>Pour ne pas enregistrer utiliser l'attribut NonSerialized</remarks>
        Private _Text As DataType.LocalizableHtml

        ''' <summary>
        ''' Le constructeur doit avoir obligatoirement la forme suivante
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub New(ByVal Page As Page, ByVal ParentID As String, ByVal TemplateName As String)
            '1er paramètre (Type d'élément), 2ème nom unique (généralement nom de la class) puis (Page, ParentID, TemplateName)
            MyBase.New(EnuElementType.PageEdit, "WELabel", Page, ParentID, TemplateName)
        End Sub


        ''' <summary>
        ''' Evènement de démarrage (OnOpen) obligatoire pour la configuration de l'élément
        ''' </summary>
        ''' <remarks></remarks>
        Protected Overrides Sub OnOpen()
            'Nom de l'élément
            MyBase.ElementInfo.ToolBoxCaption = My.Resources.text.LocalizableOpen._0005 '"Texte simple ligne"
            'Description de l'élément
            MyBase.ElementInfo.ToolBoxDescription = My.Resources.text.LocalizableOpen._0006 '"Ajouter un texte simple ligne."
            'Numéro de version majeur de l'élément
            MyBase.ElementInfo.VersionMajor = 1
            'Numéro de version mineur de l'élément
            MyBase.ElementInfo.VersionMinor = 0
            'Groupe de la barre d'outils d'openElement (NBGroupStandard,)
            MyBase.ElementInfo.GroupName = "NBGroupStandard"
            'Icone pour la barre d'outils d'openElement (Taille 16x16)
            MyBase.ElementInfo.ToolBoxIco = My.Resources.WELabel
            'Mode de redimentionnement autorisé
            MyBase.TypeResize = EnuTypeResize.Width
            'A placer obligatoirement à la fin
            MyBase.OnOpen()
        End Sub

        ''' <summary>
        ''' Propriété de la variable local "_Text"
        ''' Faire un test si nothing puis création de l'Objet
        ''' Browsable(False) dans cette situation indique que la propriété n'est pas éditable directement sur les propriétés de l'élément.
        ''' Voir les différents "DataType" disponible sur l'aide
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <Browsable(False)> _
        Public Property Text() As DataType.LocalizableHtml
            Get
                If _Text Is Nothing Then _Text = New DataType.LocalizableHtml(My.Resources.text.LocalizableProperty._Att02) 'Mon texte simple")
                Return _Text
            End Get
            Set(ByVal value As DataType.LocalizableHtml)
                _Text = value
            End Set
        End Property


        ''' <summary>
        ''' Evènement de rendu (obligatoire pour les éléments de type EnuElementType.PageEdit).
        ''' C'est ici que la création de l'HTML de l'élément se construit.
        ''' </summary>
        ''' <param name="writer"></param>
        ''' <remarks></remarks>
        Protected Overrides Sub Render(ByVal writer As Common.HtmlWriter)

            'A ajouter obligatoirement en début
            MyBase.RenderBeginTag(writer)

            'Création d'une zone éditable directement dans l'éditeur de page
            MyBase.RenderBeginTextEdit(writer, "Text", False)

            'Ecriture du contenu de la propriété "Text"
            writer.Write(Me.Text.GetHtmlValue(Me))

            'Fin de la zone éditable
            MyBase.RenderEndTextEdit(writer)

            'A ajouter obligatoirement en fin
            MyBase.RenderEndTag(writer)

        End Sub

    End Class

End Namespace
]]>

</code>

<code lang="C#">

<![CDATA[

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using openElement.WebElement.Elements;
using openElement.WebElement;
using System.ComponentModel;


//Namespace de l'élément (Créer le votre ex : Elements.MyCompagny)
namespace Elements.Standard
{


	/// <summary>
	/// L'élément présenté ci-dessous est la copie conforme du code source du label disponible dans openElement
	/// Créer une Class Public qui hérite de "openElement.WebElement.Elements.ElementBase".
	/// Le nom de la class est primordial il doit être unique pour le même Namespace et ne pourra plus être modifier par la suite.
	/// Indiquer aussi que cette Class est sérializable.
	/// </summary>
	/// <remarks>Il est préférable de nous soumettre le nom</remarks>
	[Serializable()]
	public class WELabel : ElementBase
	{

		/// <summary>
		/// Création d'une variable privé qui sera enregistré lors de la sauvegarde de la page puis rechargé à l'ouverture.
		/// </summary>
		/// <remarks>Pour ne pas enregistrer utiliser l'attribut NonSerialized</remarks>

		private DataType.LocalizableHtml _Text;
		/// <summary>
		/// Le constructeur doit avoir obligatoirement la forme suivante
		/// </summary>
		/// <remarks></remarks>
		//1er paramètre (Type d'élément), 2ème nom unique (généralement nom de la class) puis (Page, ParentID, TemplateName)
		public WELabel(Page Page, string ParentID, string TemplateName) : base(EnuElementType.PageEdit, "WELabel", Page, ParentID, TemplateName)
		{
		}


		/// <summary>
		/// Evènement de démarrage (OnOpen) obligatoire pour la configuration de l'élément
		/// </summary>
		/// <remarks></remarks>
		protected override void OnOpen()
		{
			//Nom de l'élément
			base.ElementInfo.ToolBoxCaption = My.Resources.text.LocalizableOpen._0005;
			//"Texte simple ligne"
			//Description de l'élément
			base.ElementInfo.ToolBoxDescription = My.Resources.text.LocalizableOpen._0006;
			//"Ajouter un texte simple ligne."
			//Numéro de version majeur de l'élément
			base.ElementInfo.VersionMajor = 1;
			//Numéro de version mineur de l'élément
			base.ElementInfo.VersionMinor = 0;
			//Groupe de la barre d'outils d'openElement (NBGroupStandard,)
			base.ElementInfo.GroupName = "NBGroupStandard";
			//Icone pour la barre d'outils d'openElement (Taille 16x16)
			base.ElementInfo.ToolBoxIco = My.Resources.WELabel;
			//Mode de redimentionnement autorisé
			base.TypeResize = EnuTypeResize.Width;
			//A placer obligatoirement à la fin
			base.OnOpen();
		}

		/// <summary>
		/// Propriété de la variable local "_Text"
		/// Faire un test si nothing puis création de l'Objet
		/// Browsable(False) dans cette situation indique que la propriété n'est pas éditable directement sur les propriétés de l'élément.
		/// Voir les différents "DataType" disponible sur l'aide
		/// </summary>
		/// <value></value>
		/// <returns></returns>
		/// <remarks></remarks>
		[Browsable(false)]
		public DataType.LocalizableHtml Text {
			get {
				if (_Text == null)
					_Text = new DataType.LocalizableHtml(My.Resources.text.LocalizableProperty._Att02);
				//Mon texte simple")
				return _Text;
			}
			set { _Text = value; }
		}


		/// <summary>
		/// Evènement de rendu (obligatoire pour les éléments de type EnuElementType.PageEdit).
		/// C'est ici que la création de l'HTML de l'élément se construit.
		/// </summary>
		/// <param name="writer"></param>
		/// <remarks></remarks>

		protected override void Render(Common.HtmlWriter writer)
		{
			//A ajouter obligatoirement en début
			base.RenderBeginTag(writer);

			//Création d'une zone éditable directement dans l'éditeur de page
			base.RenderBeginTextEdit(writer, "Text", false);

			//Ecriture du contenu de la propriété "Text"
			writer.Write(this.Text.GetHtmlValue(this));

			//Fin de la zone éditable
			base.RenderEndTextEdit(writer);

			//A ajouter obligatoirement en fin
			base.RenderEndTag(writer);

		}

	}

}

]]>

</code>        
</example>
</doc>

